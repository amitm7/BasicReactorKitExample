
//

import CoreData
import Sync
class Fetcher {
    public let dataStack: DataStack
    
    init() {
        self.dataStack = DBHelper.dataStackWithModelName("Algorythma")
    }
}
@objc class DBHelper: NSObject {
    public let dataStack: DataStack
    
    override init() {
        self.dataStack = DBHelper.dataStackWithModelName("Algorythma")
    }
    
   // public  var dataStack: DataStack = DataStack(modelName: "Algorythma", bundle: Bundle(for: DBHelper.self), storeType: .sqLite)
    
    class func objectsFromJSON(_ fileName: String) -> Any {
        let bundle = Bundle(for: DBHelper.self)
        let objects = try! JSON.from(fileName, bundle: bundle)!
        
        return objects
    }
    class func dataStac1k() -> DataStack{
        let bundle = Bundle(for: DBHelper.self)
        let dataStack = DataStack(modelName: "Algorythma", bundle: bundle, storeType: .sqLite)
        return dataStack
        
    }
    
    
    class func dataStackWithModelName(_ modelName: String) -> DataStack {
        let bundle = Bundle(for: DBHelper.self)
        let dataStack = DataStack(modelName: modelName, bundle: bundle, storeType: .sqLite)
        
        return dataStack
    }
    
    
    
    class func countForEntity(_ entityName: String, inContext context: NSManagedObjectContext) -> Int {
        return self.countForEntity(entityName, predicate: nil, inContext: context)
    }
    
    class func countForEntity(_ entityName: String, predicate: NSPredicate?, inContext context: NSManagedObjectContext) -> Int {
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: entityName)
        fetchRequest.predicate = predicate
        let count = try! context.count(for: fetchRequest)
        
        return count
    }
    
    class func fetchEntity(_ entityName: String, inContext context: NSManagedObjectContext) -> [NSManagedObject] {
        return self.fetchEntity(entityName, predicate: nil, sortDescriptors: nil, inContext: context)
    }
    
    class func fetchEntity(_ entityName: String, predicate: NSPredicate?, inContext context: NSManagedObjectContext) -> [NSManagedObject] {
        return self.fetchEntity(entityName, predicate: predicate, sortDescriptors: nil, inContext: context)
    }
    
    class func fetchEntity(_ entityName: String, sortDescriptors: [NSSortDescriptor]?, inContext context: NSManagedObjectContext) -> [NSManagedObject] {
        return self.fetchEntity(entityName, predicate: nil, sortDescriptors: sortDescriptors, inContext: context)
    }
    
    class func fetchEntity(_ entityName: String, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor]?, inContext context: NSManagedObjectContext) -> [NSManagedObject] {
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: entityName)
        request.predicate = predicate
        request.sortDescriptors = sortDescriptors
        let objects = try! context.fetch(request) as? [NSManagedObject] ?? [NSManagedObject]()
        
        return objects
    }
    
    class func dataStackWithModelName(_ modelName: String, storeType: DataStackStoreType = .sqLite) -> DataStack {
        let bundle = Bundle(for: DBHelper.self)
        let dataStack = DataStack(modelName: modelName, bundle: bundle, storeType: storeType)
        return dataStack
    }
    
    class func insertEntity(_ name: String, dataStack: DataStack) -> NSManagedObject {
        let entity = NSEntityDescription.entity(forEntityName: name, in: dataStack.mainContext)!
        return NSManagedObject(entity: entity, insertInto: dataStack.mainContext)
    }
    
}
import Foundation

/// The ParsingError codes generated by JSON.
public enum ParsingError: Error {
    case notFound, failed
}

public class JSON {
    /**
     Returns a JSON object from a file.
     - parameter fileName: The name of the file, the expected extension is `.json`.
     - parameter bundle:  The NSBundle where the file is located, by default is the main bundle.
     - returns: A JSON object, it can be either a Dictionary or an Array.
     */
    public class func from(_ fileName: String, bundle: Bundle = Bundle.main) throws -> Any? {
        var JSON: Any?
        
        guard let url = URL(string: fileName), let filePath = bundle.path(forResource: url.deletingPathExtension().absoluteString, ofType: url.pathExtension) else { throw ParsingError.notFound }
        
        guard let data = try? Data(contentsOf: URL(fileURLWithPath: filePath)) else { throw ParsingError.failed }
        
        JSON = try data.toJSON()
        
        return JSON
    }
}

public extension Data {
    /**
     Converts NSData to a JSON object.
     - returns: A JSON object, it can be either a Dictionary or an Array.
     */
    public func toJSON() throws -> Any? {
        var JSON: Any?
        do {
            JSON = try JSONSerialization.jsonObject(with: self, options: []) as Any
        } catch {
            throw ParsingError.failed
        }
        
        return JSON
    }
}
